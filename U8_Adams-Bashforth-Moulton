#### Adams-Bashforth-Moulton ######

from math import *
import matplotlib.pyplot as plt
import numpy as np

def f(t,u):
    func = -2*t*(u**2)
    return func

def ABM(t0,u0,h,n):
    t=np.zeros(n+1)
    u=np.zeros(n+1)
    t[0]=t0
    u[0]=u0
    val=0.5
    print('< {0:1} >'.format('u(t_{i})'), '<----{0:4}-->'.format('Aprox.' ), '<---{0:3}-->'.format('RK4' ),'<--{0:3}->'.format('A.B' ), '<--{0:3}->'.format('A.M' )  )
    print( 'u(',t[0],')= ', '\t', u[0],'\t',1  )
    for k in range (n):   #metodo de Runge-Kutta
        K1 = h*f(t[k],u[k])
        K2 = h*f(t[k]+(h/2) ,u[k] + (h/2)* K1 )
        K3 = h*f(t[k]+(h/2) ,u[k] + (h/2)* K2 )
        K4 = h*f(t[k]+h, u[k] + h*K3 )
        u[k+1] = u[k] + (1/6)*( K1 + 2* K2 + 2* K3 + K4)
        t[k+1] = t[k]+h
    for k in range(n): #metodo de Adams-Bashforth-Moulton
        AB=np.zeros(k+1)
        AM=np.zeros(k+1)
        AB[k]=( (h/24)*( 55*(f(t[k],u[k])) - 59*(f(t[k-1],u[k-1])  ) + 37*( f(t[k-2],u[k-2]) ) - 9*(f(t[k-3],u[k-3]) ) ) ) + u[k]
        AM[k]=( (h/24)*( 9*(f(t[k+1],u[k+1])) +19*(f(t[k],u[k])  ) -5*( f(t[k-1],u[k-1]) ) - (f(t[k-2],u[k-2]) ) ) ) + u[k]
        t[k+1] = t[k]+h
        #print ('u(',round (t[k+1] ,3) , ')= ',round(u[k+1],8), '\t error=', np.abs(val-u[k+1]), AM[k] ) 
        print( 'u(',t[k+1],')= ','\t' ,' {0:3f} {1:3f} {2:5f} {3:5f}'.format( u[k+1] , u[k+1] , AB[k], AM[k]  ))
    plt.plot(t,u)
    
       
ABM(0 ,1 ,0.25 ,4)
