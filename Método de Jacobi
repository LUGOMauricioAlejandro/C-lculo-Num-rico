import pprint
import numpy as np
   
A = np.array([[3.,-1.,1.],[3.0,6.0,2.0],[3.0,3.0,7.0]])
b = np.array([1.,0.,4.0])
x0 = np.array([0,0,0]) # valor inicial del sistema depende de la dimensi√≥n de la matriz A;  [[[np.random.rand(2)]]]

L = np.tril(A,-1)
U = np.triu(A,+1)
D = np.diag(np.diag(A))
Dinv = np.linalg.inv(D)
S = np.add(L,U)
G = np.dot(-Dinv,S)
c = np.dot(Dinv,b)

def J(A,b,x0,eps=1e-5,n=100):
  x=x0
  print('paso:', 0 , '|x=', x)
  for i in range (n):
    xTemp = x
    x = np.add(np.dot(G,x), c ) 
    print('paso:', i+1 , '|x=', x, "error",np.linalg.norm(x-xTemp) )
    if np.linalg.norm(x-xTemp) < eps:
      return x
  return x

x= J(A,b,x0)
